/*
 * This file is generated by jOOQ.
 */
package com.alessiodp.oreannouncer.common.jpa.tables.records;


import com.alessiodp.oreannouncer.common.jpa.tables.Players;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayersRecord extends UpdatableRecordImpl<PlayersRecord> implements Record2<String, Boolean> {

    private static final long serialVersionUID = -1153399055;

    /**
     * Setter for <code>PLAYERS.UUID</code>.
     */
    public void setUuid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PLAYERS.UUID</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PLAYERS.ALERTS</code>.
     */
    public void setAlerts(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>PLAYERS.ALERTS</code>.
     */
    public Boolean getAlerts() {
        return (Boolean) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Boolean> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Players.PLAYERS.UUID;
    }

    @Override
    public Field<Boolean> field2() {
        return Players.PLAYERS.ALERTS;
    }

    @Override
    public String component1() {
        return getUuid();
    }

    @Override
    public Boolean component2() {
        return getAlerts();
    }

    @Override
    public String value1() {
        return getUuid();
    }

    @Override
    public Boolean value2() {
        return getAlerts();
    }

    @Override
    public PlayersRecord value1(String value) {
        setUuid(value);
        return this;
    }

    @Override
    public PlayersRecord value2(Boolean value) {
        setAlerts(value);
        return this;
    }

    @Override
    public PlayersRecord values(String value1, Boolean value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlayersRecord
     */
    public PlayersRecord() {
        super(Players.PLAYERS);
    }

    /**
     * Create a detached, initialised PlayersRecord
     */
    public PlayersRecord(String uuid, Boolean alerts) {
        super(Players.PLAYERS);

        set(0, uuid);
        set(1, alerts);
    }
}

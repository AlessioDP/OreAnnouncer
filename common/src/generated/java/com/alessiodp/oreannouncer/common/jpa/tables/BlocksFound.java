/*
 * This file is generated by jOOQ.
 */
package com.alessiodp.oreannouncer.common.jpa.tables;


import com.alessiodp.oreannouncer.common.jpa.DefaultSchema;
import com.alessiodp.oreannouncer.common.jpa.Keys;
import com.alessiodp.oreannouncer.common.jpa.tables.records.BlocksFoundRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlocksFound extends TableImpl<BlocksFoundRecord> {

    private static final long serialVersionUID = 1206987214;

    /**
     * The reference instance of <code>BLOCKS_FOUND</code>
     */
    public static final BlocksFound BLOCKS_FOUND = new BlocksFound();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlocksFoundRecord> getRecordType() {
        return BlocksFoundRecord.class;
    }

    /**
     * The column <code>BLOCKS_FOUND.ID</code>.
     */
    public final TableField<BlocksFoundRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BLOCKS_FOUND.FOUND</code>.
     */
    public final TableField<BlocksFoundRecord, Integer> FOUND = createField(DSL.name("FOUND"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>BLOCKS_FOUND.MATERIAL_NAME</code>.
     */
    public final TableField<BlocksFoundRecord, String> MATERIAL_NAME = createField(DSL.name("MATERIAL_NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>BLOCKS_FOUND.PLAYER</code>.
     */
    public final TableField<BlocksFoundRecord, String> PLAYER = createField(DSL.name("PLAYER"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>BLOCKS_FOUND.TIMESTAMP</code>.
     */
    public final TableField<BlocksFoundRecord, BigDecimal> TIMESTAMP = createField(DSL.name("TIMESTAMP"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).nullable(false), this, "");

    /**
     * Create a <code>BLOCKS_FOUND</code> table reference
     */
    public BlocksFound() {
        this(DSL.name("BLOCKS_FOUND"), null);
    }

    /**
     * Create an aliased <code>BLOCKS_FOUND</code> table reference
     */
    public BlocksFound(String alias) {
        this(DSL.name(alias), BLOCKS_FOUND);
    }

    /**
     * Create an aliased <code>BLOCKS_FOUND</code> table reference
     */
    public BlocksFound(Name alias) {
        this(alias, BLOCKS_FOUND);
    }

    private BlocksFound(Name alias, Table<BlocksFoundRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlocksFound(Name alias, Table<BlocksFoundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BlocksFound(Table<O> child, ForeignKey<O, BlocksFoundRecord> key) {
        super(child, key, BLOCKS_FOUND);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BlocksFoundRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<UniqueKey<BlocksFoundRecord>> getKeys() {
        return Arrays.<UniqueKey<BlocksFoundRecord>>asList(Keys.CONSTRAINT_9);
    }

    @Override
    public BlocksFound as(String alias) {
        return new BlocksFound(DSL.name(alias), this);
    }

    @Override
    public BlocksFound as(Name alias) {
        return new BlocksFound(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlocksFound rename(String name) {
        return new BlocksFound(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlocksFound rename(Name name) {
        return new BlocksFound(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
